const SignUpNew = (props) => {
    const [name, setName] = useState("");
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");

    const [validEmail, setValidEmail] = useState(false);
    const [passwordLength, setPasswordLength] = useState(false);
    const [passwordUppercase, setPasswordUppercase] = useState(false);
    const [passwordNumber, setPasswordNumber] = useState(false);

    const [signUpFailed, setSignUpFailed] = useState({
        status: false,
        message: "",
    });

    const theme = useTheme();
    const emailHelperTextClasses = validHelperText(validEmail)();

    const handleEmail = (email) => {
        try {
            const address = addrs.parseOneAddress(email);
            if (address === null) {
                setValidEmail(false);
                setEmail(email);
            } else {
                setValidEmail(true);
                setEmail(address.address);
            }
        } catch (ex) {
            setValidEmail(false);
            setEmail(email);
        }
    };

    const PostSignUp = async () => {
        try {
            const response = await axios.post("/signup/new", {
                "name": name,
                "email": email,
                "password": password
            }, { withCredentials: true })
            props.signUpCallback();
        } catch (error) {
            if (error.response) {
                // The request was made and the server responded with a status code
                // that falls out of the range of 2xx
                setSignUpFailed({
                    status: true,
                    message: error.response.data.statusMessage,
                });
            } else {
                // Something happened in setting up the request that triggered an Error
                setSignUpFailed({
                    status: true,
                    message: "Could not sign up. Website is undergong maintenence.",
                });
            }
        }
    };

    useEffect(() => {
        setPasswordLength(checkPasswordLength(password));
        setPasswordUppercase(checkPasswordUppercase(password));
        setPasswordNumber(checkPasswordNumber(password));
    }, [password]);

    useEffect(() => {
        setSignUpFailed({
            status: false,
            message: "",
        });
    }, [name, email, password]);

    const validSignUp =
        name !== "" &&
        validEmail &&
        passwordLength &&
        passwordUppercase &&
        passwordNumber;

    return (
        <Grid
            container
            justifyContent="center"
        >
            <Grid item xs='auto'>
                <Grid style={{ marginTop: 30 }} alignItems='center' container>
                    <Grid item xs='auto'>
                        <Typography variant="h5">Create your account</Typography>
                    </Grid>
                    <Grid item xs container justifyContent='flex-end' style={{marginLeft:'3rem'}}>
                        <Grid item xs='auto'>
                            <StandardButton
                                animateTo={{
                                    boxShadow: '0 4px 20px rgb(34 34 34 / 15%)',
                                    scale: 1.02
                                }}
                                animate={true}
                                styleOverrides={
                                    {
                                        padding: 8,
                                        paddingLeft: 18,
                                        paddingRight: 18,
                                    }}
                                onClick={() => props.setPage('SignUp')}
                            >
                                <Typography variant='body1'>Register</Typography>
                            </StandardButton>
                        </Grid>
                    </Grid>
                </Grid>
                <div
                    item
                    xs={12}
                >
                    <StandardForm
                        fullWidth
                        text='Name'
                        type='string'
                        onChange={(event) => setName(event.target.value)}
                    />
                </div>
                <div style={{ marginTop: 24 }} item xs={12}>
                    <StandardForm
                        fullWidth
                        text='Email address'
                        label="Email"
                        error={email !== "" && validEmail === false}
                        helperText={
                            email !== "" && validEmail === false ? "Invalid email" : null
                        }
                        FormHelperTextProps={{ classes: emailHelperTextClasses }}
                        InputProps={{ spellCheck: false }}
                        onChange={(event) => handleEmail(event.target.value)}
                    />
                </div>
                <div style={{ marginTop: 24 }} item xs={12}>
                    <PasswordField2
                        text='Password'
                        error={
                            password !== "" &&
                            (!passwordLength || !passwordUppercase || !passwordNumber)
                        }
                        validPassword={
                            password !== "" &&
                            passwordLength &&
                            passwordUppercase &&
                            passwordNumber
                        }
                        helperText={false && "Password must be (8) characters or longer, contain one capital letter [A-Z], and one number [0-9]."}
                        label="Password"
                        password={password}
                        setPassword={setPassword}
                    />
                </div>
                <div style={{ marginTop: 34 }} item xs={12}>
                    <StandardButton
                        onClick={PostSignUp}
                        styleOverrides={
                            validSignUp
                                ? { border: 'none', backgroundColor: theme.palette.primary.main }
                                : { border: 'none', backgroundColor: "rgba(0, 0, 0, 0.20)" }

                        }
                        disabled={!validSignUp}
                    >
                        <Typography variant="button" style={{ color: "white" }}>
                            Sign up
                        </Typography>
                    </StandardButton>
                </div>
                {signUpFailed.status && (
                    <div item xs={12}>
                        <Typography
                            style={{ color: theme.palette.error.main }}
                            variant="body1"
                        >
                            {signUpFailed.message}
                        </Typography>
                    </div>
                )}
                <div item xs={12}>
                    <div style={{ marginLeft: -30, marginRight: -30 }}>
                        <SocialBanner />
                    </div>
                </div>
                <div style={{ marginTop: 12 }} item xs={12}>
                    <GoogleSignInButton text='Sign up with Google' />
                </div>
                <div style={{ marginTop: 12 }} item xs={12}>
                    <FacebookSignInButton text='Sign up with Facebook' />
                </div>
            </Grid>
        </Grid>
    );
}

